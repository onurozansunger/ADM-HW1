# -*- coding: utf-8 -*-
"""HW1_Solutions_2113119_Sunger_OnurOzan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dNBA2vlsUpeBBxjgZCWVwsxdpNMgRf2i

ADM 2023 HOMEWORK 1 SOLUTIONS- ONUR OZAN SUNGER- 2113119

Hello sir, before the codes, I would like to say the following: I just moved to my house and there is no internet in my house yet. For this reason, I had problems with the assignment. Although I have solved Problem 2 and Problem 3, I have a considerable deficiency in Problem 1. I apologize to you for this. I only had 7 GB of Mobile Data left and there are 5 days left before it is renewed. For this reason, I have to submit it in its incomplete form. With your permission, I would like to complete and send the missing parts when the internet comes to my home. Thank you in advance.

# **Problem 1**

Introduction
"""

#Say "Hello, World!" With Python


if __name__ == '__main__':
    print("Hello, World!")

#Python If-Else

#!/bin/python3

import math
import os
import random
import re
import sys



if __name__ == '__main__':
    n = int(input().strip())
if n % 2 == 1:
    print("Weird")
elif n % 2 == 0 and 2 <= n <= 5:
    print("Not Weird")
elif n % 2 == 0 and 6 <= n <= 20:
    print("Weird")
else:
    print("Not Weird")

#Arithmetic Operators

if __name__ == '__main__':
    a = int(input())
    b = int(input())
    c=a+b
    print(c)
    c=a-b
    print(c)
    c=(a*b)
    print(c)

#Python: Division

if __name__ == '__main__':
    a = int(input())
    b = int(input())
    c=a//b
    print(c)
    c=a/b
    print(c)

#Loops

if __name__ == '__main__':
    n = int(input())
    for i in range(n):
        print(i ** 2)

#Write a function

def is_leap(year):
    leap = False
    if year % 4 == 0:
        leap = True
        if year % 100 == 0:
            leap = False
            if year % 400 == 0:
                leap = True
    return leap

#Print Function

if __name__ == '__main__':
    n = int(input())
    liste = list(range(1, n + 1))
    result = ''.join(map(str, liste))
    print(result)

"""Data Types"""

#List Comprehensions

if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    coordinates = [[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if i + j + k != n]

print(coordinates)

#Find the Runner-Up Score!

if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())

    arr = list(arr)

    sorted_arr = sorted(arr, reverse=True)

    runner_up_score = None

    for score in sorted_arr:
        if score != sorted_arr[0]:
            runner_up_score = score
            break

    print(runner_up_score)

#Nested Lists

if __name__ == '__main__':
    student_data = []
    for _ in range(int(input())):
        name = input()
        score = float(input())
        student_data.append([name, score])
    student_data.sort(key=lambda x: (x[1], x[0]))
    second_lowest_score = None
    for i in range(1, len(student_data)):
        if student_data[i][1] > student_data[i - 1][1]:
            second_lowest_score = student_data[i][1]
            break
    second_lowest_students = [name for name, score in student_data if score == second_lowest_score]
    second_lowest_students.sort()
    for name in second_lowest_students:
        print(name)

#Finding the percentage

if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
    if query_name in student_marks:
        marks = student_marks[query_name]
        average = sum(marks) / len(marks)
        print("{:.2f}".format(average))
    else:
        print("Student not found")

#Lists

if __name__ == '__main__':
    N = int(input())
    my_list = []
    for _ in range(N):
        command = input().split()
        if command[0] == "insert":
            i, e = int(command[1]), int(command[2])
            my_list.insert(i, e)
        elif command[0] == "print":
            print(my_list)
        elif command[0] == "remove":
            e = int(command[1])
            my_list.remove(e)
        elif command[0] == "append":
            e = int(command[1])
            my_list.append(e)
        elif command[0] == "sort":
            my_list.sort()
        elif command[0] == "pop":
            my_list.pop()
        elif command[0] == "reverse":
            my_list.reverse()

#Tuples

if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())

    my_tuple = tuple(integer_list)

    result = hash(my_tuple)
    print(result)

"""Strings"""

#sWAP Case
def swap_case(s):
    return s.swapcase()

#String Split and Join

def split_and_join(line):
    line = line.split(" ")
    line = "-".join(line)
    return line

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)

#What's Your Name?

def print_full_name(a, b):
    print("Hello %s %s! You just delved into python."%(a, b))

#Mutations

def mutate_string(string, position, character):
    return string[:position] + character + string[position + 1:]

#Find a string

def count_substring(string, sub_string):
    counter = 0
    i = string.find(sub_string)

    while i != -1:
        counter += 1
        i = string.find(sub_string, i+1)


    return counter

#String Validators

if __name__ == '__main__':
    s = input()
    print(any(i.isalnum() for i in s))
    print(any(i.isalpha() for i in s))
    print(any(i.isdigit() for i in s))
    print(any(i.islower() for i in s))
    print(any(i.isupper() for i in s))

#Text Alignment

THICKNESS = int(input()) #odd number
a="H"
for i in range(THICKNESS):
    print((a*i).rjust(THICKNESS-1)+a+(a*i).ljust(THICKNESS-1))

for i in range(THICKNESS+1):
    print((a*THICKNESS).center(THICKNESS*2)+(a*THICKNESS).center(THICKNESS*6))

for i in range((THICKNESS+1)//2):
    print((a*THICKNESS*5).center(THICKNESS*6))

for i in range(THICKNESS+1):
    print((a*THICKNESS).center(THICKNESS*2)+(a*THICKNESS).center(THICKNESS*6))

for i in range(THICKNESS):
    print(((a*(THICKNESS-i-1)).rjust(THICKNESS)+a+(a*(THICKNESS-i-1)).ljust(THICKNESS)).rjust(THICKNESS*6))

#Text Wrap



def wrap(string, max_width):
    string = [a for a in string]
    for i in range(max_width, len(string) + max_width, max_width+1):
        string.insert(i, '\n')
    return ("").join(string)

#Designer Door Mat

A, B = map(int, input().split())
for i in range(int(A/2)):
    string = ".|." * (2 * i + 1)
    x = string.center(B, '-')
    print(x)
print("WELCOME".center(B, '-'))
for i in reversed(range(int(A/2))):
    string = ".|." * (2 * i + 1)
    x = string.center(B, '-')
    print(x)

#String Formatting

def print_formatted(number):
    for i in range(1, number + 1):
        width = len(f"{number:b}")
        print(f"{i:{width}} {i:{width}o} {i:{width}X} {i:{width}b}")

#Alphabet Rangoli

def print_rangoli(size):
    width = size*4-3
    ''' I am tired'''
    string = ''
    for i in range(1, size+1):
        for j in range(0, i):
            string += chr(96+size-j)
            if len(string) < width:
                string += '-'
        for k in range(i-1, 0, -1):
            string += chr(97+size-k)
            if len(string) < width:
                string += '-'
        print(string.center(width, '-'))
        string = ''

    for i in range(size-1, 0, -1):
        string = ''
        for j in range(0, i):
            string += chr(96+size-j)
            if len(string) < width:
                string += '-'
        for k in range(i-1, 0, -1):
            string += chr(97+size-k)
            if len(string) < width:
                string += '-'
        print(string.center(width, '-'))

#Capitalize


# Complete the solve function below.
def solve(s):
    s = s.split(" ")
    return " ".join(i.capitalize() for i in s)
    #I get help from Google

#The Minion Game

#I got help from Google
def minion_game(string):
    stuart = 0
    kevin = 0
    strlen = len(string)

    for i in range(strlen):
        for vowc in "AEIOU":
            if string[i].find(vowc) >= 0:
                kevin = kevin + strlen - i

    stuart = int(strlen*(strlen+1)/2) - kevin

    if stuart > kevin:
        print("Stuart " + str(stuart))
    if kevin > stuart:
        print("Kevin " + str(kevin))
    if kevin == stuart:
        print("Draw")

    return 0

#Merge the Tools!

def merge_the_tools(string, k):
    x = [string[i:i+k] for i in range(0, len(string), k)]
    for i in x:
        j = 0
        short = ""
        for _ in i:
            if i.index(_) == j:
                short += _
            j += 1
        print(short)

"""Sets"""

#Introduction to Sets

def average(array):
    a = set(arr)
    return float(sum(a)) / len(a)

#Symmetric Difference

m = int(input())

set_a = set(map(int, input().split()))

n = int(input())

set_b = set(map(int, input().split()))

difference_a = set_a.difference(set_b)
difference_b = set_b.difference(set_a)

union_of_differences = difference_a.union(difference_b)

result_list = list(union_of_differences)

result_list.sort()

for i in range(len(result_list)):
    print(result_list[i])

#No Idea!

N = input().split()
M = input().split()
A = set(input().split())
B = set(input().split())
counter = 0

for i in M:
    if i in A:
        counter += 1
    if i in B:
        counter -= 1

print(counter)

#Set .add()

n = int(input())
names_set = set()
for i in range(n):
    name = input()
    names_set.add(name)
print(len(names_set))

"""Date and Time"""

#Calendar Module

from datetime import datetime

input_date = input("")

try:
    date_obj = datetime.strptime(input_date, "%m %d %Y")

    day_of_week = date_obj.strftime("%A").upper()

    print(day_of_week)
except ValueError:
    print("Invalid date format. Please use MM DD YYYY format.")

#Time Delta

#!/bin/python3
from datetime import datetime
import math
import os
import random
import re
import sys

# Complete the time_delta function below.
def time_delta(t1, t2):
    time_one = datetime.strptime(t1, '%a %d %b %Y %H:%M:%S %z')
    time_two = datetime.strptime(t2, '%a %d %b %Y %H:%M:%S %z')

    time_difference_seconds = abs((time_one - time_two).total_seconds())

    return str(int(time_difference_seconds))

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        t1 = input()

        t2 = input()

        delta = time_delta(t1, t2)

        fptr.write(delta + '\n')

    fptr.close()

"""Python Functionals"""

#Map and Lambda Function


cube = lambda x: x ** 3


def fibonacci(n):
    List = [0, 1]
    for i in range(2, n):
        List.append(List[i-1] + List[i-2])

    return(List[0:n])
    #I got help from google

"""# **Problem 2**"""

#Birthday Cake Candles

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'birthdayCakeCandles' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY candles as parameter.
#

def birthdayCakeCandles(ar):
    candles = 0
    max_arr = max(ar)
    for a in ar:
        if a == max_arr:
            candles += 1
    return candles

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    candles_count = int(input().strip())

    candles = list(map(int, input().rstrip().split()))

    result = birthdayCakeCandles(candles)

    fptr.write(str(result) + '\n')

    fptr.close()

#Number Line Jumps

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'kangaroo' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. INTEGER x1
#  2. INTEGER v1
#  3. INTEGER x2
#  4. INTEGER v2
#

def kangaroo(x1, v1, x2, v2):
    if v1 == v2:
        return "NO"

    if (x2 - x1) % (v1 - v2) == 0 and (x2 - x1) / (v1 - v2) >= 0:
        return "YES"
    else:
        return "NO"

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    x1 = int(first_multiple_input[0])

    v1 = int(first_multiple_input[1])

    x2 = int(first_multiple_input[2])

    v2 = int(first_multiple_input[3])

    result = kangaroo(x1, v1, x2, v2)

    fptr.write(result + '\n')

    fptr.close()

#Viral Advertising

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'viralAdvertising' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER n as parameter.
#

def viralAdvertising(n):
    shared =5
    cumulative=0
    for i in range(1,n+1):
        liked = shared//2
        cumulative+=liked
        shared = liked*3
    return cumulative

    #I got help from Google

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    result = viralAdvertising(n)

    fptr.write(str(result) + '\n')

    fptr.close()

#Recursive Digit Sum

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'superDigit' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. STRING n
#  2. INTEGER k
#

def superDigit(n, k):
    if len(n) == 1:
        return int(n)

    digit_sum = sum(int(digit) for digit in n)

    return superDigit(str(digit_sum * k), 1)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = first_multiple_input[0]

    k = int(first_multiple_input[1])

    result = superDigit(n, k)

    fptr.write(str(result) + '\n')

    fptr.close()

#Insertion Sort - Part 1

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'insertionSort1' function below.
#
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY arr
#

def insertionSort1(n, arr):
    key = arr[-1]
    i = n - 2

    while (i >= 0) and (arr[i] > key):
        arr[i + 1] = arr[i]
        print(" ".join(map(str, arr)))
        i -= 1

    arr[i + 1] = key
    print(" ".join(map(str, arr)))

if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)

#Insertion Sort - Part 2

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'insertionSort2' function below.
#
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY arr
#

def insertionSort2(n, arr):
    for i in range(1, n):
        key = arr[i]
        j = i - 1

        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1

        arr[j + 1] = key
        print(" ".join(map(str, arr)))

if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort2(n, arr)